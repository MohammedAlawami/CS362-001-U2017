/*
 * This file was automatically generated by EvoSuite
 * Mon Aug 07 21:41:19 GMT 2017
 */

package calendar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import calendar.Appt;
import calendar.CalDay;
import calendar.TimeTable;
import java.time.Clock;
import java.time.ZonedDateTime;
import java.util.GregorianCalendar;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeTable_ESTest extends TimeTable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Appt) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      boolean boolean1 = linkedList0.offer((Appt) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      
      LinkedList<Appt> linkedList1 = timeTable0.permute(linkedList0, intArray0);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertArrayEquals(new int[] {1, 0, 0}, intArray0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertEquals(2, linkedList0.size());
      assertEquals(2, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int[] intArray0 = new int[1];
      boolean boolean0 = linkedList0.add((Appt) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.offer((Appt) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      
      LinkedList<Appt> linkedList1 = timeTable0.permute(linkedList0, intArray0);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertEquals(2, linkedList0.size());
      assertEquals(2, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        timeTable0.permute((LinkedList<Appt>) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int[] intArray0 = new int[1];
      Appt appt0 = new Appt(1, 1, 24, 1, 3, "org.apache.oro.io.AwkFilenameFilter", "org.apache.oro.io.AwkFilenameFilter");
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertNotNull(appt0);
      assertEquals(1, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(3, appt0.getStartYear());
      assertEquals("org.apache.oro.io.AwkFilenameFilter", appt0.getTitle());
      assertEquals(1, appt0.getStartMinute());
      assertTrue(appt0.getValid());
      assertEquals(24, appt0.getStartDay());
      assertEquals(1, appt0.getStartMonth());
      assertEquals("org.apache.oro.io.AwkFilenameFilter", appt0.getDescription());
      assertFalse(appt0.isRecurring());
      
      boolean boolean0 = linkedList0.add(appt0);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(3, appt0.getStartYear());
      assertEquals("org.apache.oro.io.AwkFilenameFilter", appt0.getTitle());
      assertEquals(1, appt0.getStartMinute());
      assertTrue(appt0.getValid());
      assertEquals(24, appt0.getStartDay());
      assertEquals(1, appt0.getStartMonth());
      assertEquals("org.apache.oro.io.AwkFilenameFilter", appt0.getDescription());
      assertFalse(appt0.isRecurring());
      
      intArray0[0] = 1000;
      // Undeclared exception!
      try { 
        timeTable0.permute(linkedList0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1000, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Appt) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        timeTable0.permute(linkedList0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("calendar.TimeTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int[] intArray0 = new int[3];
      LinkedList<Appt> linkedList1 = timeTable0.permute(linkedList0, intArray0);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Appt appt0 = new Appt(2, 2, 2, 2, 2, "", "Kl");
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertNotNull(appt0);
      assertEquals("", appt0.getTitle());
      assertEquals(2, appt0.getStartMinute());
      assertEquals(2, appt0.getStartYear());
      assertEquals(2, appt0.getStartHour());
      assertEquals("Kl", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getRecurNumber());
      assertTrue(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(2, appt0.getStartMonth());
      assertEquals(2, appt0.getStartDay());
      assertFalse(appt0.isRecurring());
      
      linkedList0.push(appt0);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, linkedList0.size());
      assertEquals("", appt0.getTitle());
      assertEquals(2, appt0.getStartMinute());
      assertEquals(2, appt0.getStartYear());
      assertEquals(2, appt0.getStartHour());
      assertEquals("Kl", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getRecurNumber());
      assertTrue(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(2, appt0.getStartMonth());
      assertEquals(2, appt0.getStartDay());
      assertFalse(appt0.isRecurring());
      
      boolean boolean0 = linkedList0.add(appt0);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertTrue(boolean0);
      assertEquals(2, linkedList0.size());
      assertEquals("", appt0.getTitle());
      assertEquals(2, appt0.getStartMinute());
      assertEquals(2, appt0.getStartYear());
      assertEquals(2, appt0.getStartHour());
      assertEquals("Kl", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getRecurNumber());
      assertTrue(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(2, appt0.getStartMonth());
      assertEquals(2, appt0.getStartDay());
      assertFalse(appt0.isRecurring());
      
      boolean boolean1 = linkedList0.add(appt0);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, linkedList0.size());
      assertEquals("", appt0.getTitle());
      assertEquals(2, appt0.getStartMinute());
      assertEquals(2, appt0.getStartYear());
      assertEquals(2, appt0.getStartHour());
      assertEquals("Kl", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getRecurNumber());
      assertTrue(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(2, appt0.getStartMonth());
      assertEquals(2, appt0.getStartDay());
      assertFalse(appt0.isRecurring());
      
      LinkedList<Appt> linkedList1 = timeTable0.deleteAppt(linkedList0, appt0);
      assertSame(linkedList0, linkedList1);
      assertSame(linkedList1, linkedList0);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertNotNull(linkedList1);
      assertEquals(2, linkedList0.size());
      assertEquals("", appt0.getTitle());
      assertEquals(2, appt0.getStartMinute());
      assertEquals(2, appt0.getStartYear());
      assertEquals(2, appt0.getStartHour());
      assertEquals("Kl", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getRecurNumber());
      assertTrue(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(2, appt0.getStartMonth());
      assertEquals(2, appt0.getStartDay());
      assertFalse(appt0.isRecurring());
      assertEquals(2, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Appt appt0 = new Appt(0, (-1), 0, 5, 2296, "", "");
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertNotNull(appt0);
      assertFalse(appt0.isRecurring());
      assertEquals((-1), appt0.getStartMinute());
      assertEquals(0, appt0.getStartDay());
      assertEquals(2296, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("", appt0.getDescription());
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartHour());
      assertEquals(5, appt0.getStartMonth());
      
      boolean boolean0 = linkedList0.add(appt0);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(appt0.isRecurring());
      assertEquals((-1), appt0.getStartMinute());
      assertEquals(0, appt0.getStartDay());
      assertEquals(2296, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("", appt0.getDescription());
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartHour());
      assertEquals(5, appt0.getStartMonth());
      
      boolean boolean1 = linkedList0.add(appt0);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertFalse(appt0.isRecurring());
      assertEquals((-1), appt0.getStartMinute());
      assertEquals(0, appt0.getStartDay());
      assertEquals(2296, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("", appt0.getDescription());
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartHour());
      assertEquals(5, appt0.getStartMonth());
      
      linkedList0.push(appt0);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, linkedList0.size());
      assertFalse(appt0.isRecurring());
      assertEquals((-1), appt0.getStartMinute());
      assertEquals(0, appt0.getStartDay());
      assertEquals(2296, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("", appt0.getDescription());
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartHour());
      assertEquals(5, appt0.getStartMonth());
      
      Appt appt1 = new Appt(0, 2, 3, 3, 0, "XvS", "ae%Ix3'1ff<J_V!t`");
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertFalse(appt1.equals((Object)appt0));
      assertNotNull(appt1);
      assertEquals(3, appt1.getStartDay());
      assertEquals(3, appt1.getStartMonth());
      assertEquals(2, appt1.getStartMinute());
      assertTrue(appt1.getValid());
      assertFalse(appt1.isRecurring());
      assertEquals(2, appt1.getRecurBy());
      assertEquals("ae%Ix3'1ff<J_V!t`", appt1.getDescription());
      assertEquals(0, appt1.getRecurNumber());
      assertEquals("XvS", appt1.getTitle());
      assertEquals(0, appt1.getStartHour());
      assertEquals(0, appt1.getStartYear());
      assertEquals(0, appt1.getRecurIncrement());
      
      LinkedList<Appt> linkedList1 = timeTable0.deleteAppt(linkedList0, appt1);
      assertNotSame(appt1, appt0);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertFalse(appt1.equals((Object)appt0));
      assertNull(linkedList1);
      assertEquals(3, linkedList0.size());
      assertEquals(3, appt1.getStartDay());
      assertEquals(3, appt1.getStartMonth());
      assertEquals(2, appt1.getStartMinute());
      assertTrue(appt1.getValid());
      assertFalse(appt1.isRecurring());
      assertEquals(2, appt1.getRecurBy());
      assertEquals("ae%Ix3'1ff<J_V!t`", appt1.getDescription());
      assertEquals(0, appt1.getRecurNumber());
      assertEquals("XvS", appt1.getTitle());
      assertEquals(0, appt1.getStartHour());
      assertEquals(0, appt1.getStartYear());
      assertEquals(0, appt1.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Appt) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add((Appt) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      
      linkedList0.push((Appt) null);
      assertEquals(3, linkedList0.size());
      
      Appt appt0 = new Appt(0, 2, 3, 1, 0, "XvS", "ae%Ix3'1ff<J_V!t`");
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertNotNull(appt0);
      assertEquals(3, appt0.getStartDay());
      assertEquals(0, appt0.getStartYear());
      assertFalse(appt0.isRecurring());
      assertEquals("XvS", appt0.getTitle());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartHour());
      assertEquals(1, appt0.getStartMonth());
      assertTrue(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("ae%Ix3'1ff<J_V!t`", appt0.getDescription());
      assertEquals(2, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurNumber());
      
      // Undeclared exception!
      try { 
        timeTable0.deleteAppt(linkedList0, appt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.TimeTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "", "");
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertNotNull(appt0);
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getStartYear());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartDay());
      assertFalse(appt0.isRecurring());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartMinute());
      
      LinkedList<Appt> linkedList1 = timeTable0.deleteAppt(linkedList0, appt0);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertNull(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getStartYear());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartDay());
      assertFalse(appt0.isRecurring());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartMinute());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Appt appt0 = new Appt(0, 2, 3, 1, 0, "XvS", "ae%Ix3'1ff<J_V!t`");
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertNotNull(appt0);
      assertTrue(appt0.getValid());
      assertEquals(1, appt0.getStartMonth());
      assertEquals(3, appt0.getStartDay());
      assertEquals("ae%Ix3'1ff<J_V!t`", appt0.getDescription());
      assertEquals("XvS", appt0.getTitle());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(2, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurNumber());
      
      LinkedList<Appt> linkedList1 = timeTable0.deleteAppt(linkedList0, appt0);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertNull(linkedList1);
      assertEquals(0, linkedList0.size());
      assertTrue(appt0.getValid());
      assertEquals(1, appt0.getStartMonth());
      assertEquals(3, appt0.getStartDay());
      assertEquals("ae%Ix3'1ff<J_V!t`", appt0.getDescription());
      assertEquals("XvS", appt0.getTitle());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(2, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurNumber());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Appt> linkedList1 = timeTable0.deleteAppt(linkedList0, (Appt) null);
      assertNull(linkedList1);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "", "");
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertNotNull(appt0);
      assertEquals(0, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartMonth());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      
      LinkedList<Appt> linkedList0 = timeTable0.deleteAppt((LinkedList<Appt>) null, appt0);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertNull(linkedList0);
      assertEquals(0, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartMonth());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 5;
      Appt appt0 = new Appt(5, 5, 5, 5, 5, "", "");
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertNotNull(appt0);
      assertTrue(appt0.getValid());
      assertEquals(5, appt0.getStartMonth());
      assertEquals(5, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.isRecurring());
      assertEquals("", appt0.getTitle());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(5, appt0.getStartHour());
      assertEquals(5, appt0.getStartYear());
      assertEquals(5, appt0.getStartDay());
      
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      boolean boolean0 = linkedList0.add(appt0);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(appt0.getValid());
      assertEquals(5, appt0.getStartMonth());
      assertEquals(5, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.isRecurring());
      assertEquals("", appt0.getTitle());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(5, appt0.getStartHour());
      assertEquals(5, appt0.getStartYear());
      assertEquals(5, appt0.getStartDay());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3754, 1, 0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=3754,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      appt0.setRecurrence(intArray0, 1, 1789, 5);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertArrayEquals(new int[] {5}, intArray0);
      assertTrue(appt0.getValid());
      assertTrue(appt0.isRecurring());
      assertEquals(1789, appt0.getRecurIncrement());
      assertEquals(5, appt0.getStartMonth());
      assertEquals(5, appt0.getStartMinute());
      assertEquals("", appt0.getDescription());
      assertEquals("", appt0.getTitle());
      assertEquals(5, appt0.getRecurNumber());
      assertEquals(5, appt0.getStartHour());
      assertEquals(5, appt0.getStartYear());
      assertEquals(1, appt0.getRecurBy());
      assertEquals(5, appt0.getStartDay());
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      
      // Undeclared exception!
      try { 
        timeTable0.getApptRange(linkedList0, mockGregorianCalendar0, mockGregorianCalendar1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.TimeTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int[] intArray0 = new int[6];
      Appt appt0 = new Appt(5, 5, 5, 5, 5, "", "");
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertNotNull(appt0);
      assertTrue(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("", appt0.getTitle());
      assertEquals(5, appt0.getStartMonth());
      assertEquals("", appt0.getDescription());
      assertEquals(5, appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(5, appt0.getStartHour());
      assertEquals(5, appt0.getStartYear());
      assertEquals(5, appt0.getStartDay());
      assertFalse(appt0.isRecurring());
      
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      boolean boolean0 = linkedList0.add(appt0);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("", appt0.getTitle());
      assertEquals(5, appt0.getStartMonth());
      assertEquals("", appt0.getDescription());
      assertEquals(5, appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(5, appt0.getStartHour());
      assertEquals(5, appt0.getStartYear());
      assertEquals(5, appt0.getStartDay());
      assertFalse(appt0.isRecurring());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3754, 1, 0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=3754,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      appt0.setRecurrence(intArray0, 9, 1663, 5);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, appt0.getRecurBy());
      assertTrue(appt0.getValid());
      assertEquals(5, appt0.getRecurNumber());
      assertEquals(1663, appt0.getRecurIncrement());
      assertEquals("", appt0.getTitle());
      assertEquals(5, appt0.getStartMonth());
      assertEquals("", appt0.getDescription());
      assertEquals(5, appt0.getStartMinute());
      assertEquals(5, appt0.getStartHour());
      assertTrue(appt0.isRecurring());
      assertEquals(5, appt0.getStartYear());
      assertEquals(5, appt0.getStartDay());
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      
      // Undeclared exception!
      try { 
        timeTable0.getApptRange(linkedList0, mockGregorianCalendar0, mockGregorianCalendar1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.TimeTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int[] intArray0 = new int[1];
      Appt appt0 = new Appt(5, 5, 5, 5, 5, "", "");
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertNotNull(appt0);
      assertEquals(5, appt0.getStartMinute());
      assertEquals("", appt0.getDescription());
      assertEquals(5, appt0.getStartHour());
      assertEquals(5, appt0.getStartYear());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(5, appt0.getStartDay());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(5, appt0.getStartMonth());
      assertTrue(appt0.getValid());
      assertFalse(appt0.isRecurring());
      assertEquals("", appt0.getTitle());
      
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      boolean boolean0 = linkedList0.add(appt0);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(5, appt0.getStartMinute());
      assertEquals("", appt0.getDescription());
      assertEquals(5, appt0.getStartHour());
      assertEquals(5, appt0.getStartYear());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(5, appt0.getStartDay());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(5, appt0.getStartMonth());
      assertTrue(appt0.getValid());
      assertFalse(appt0.isRecurring());
      assertEquals("", appt0.getTitle());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3754, 1, 0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=3754,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      appt0.setRecurrence(intArray0, 1, 1789, 5);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(5, appt0.getStartMinute());
      assertEquals("", appt0.getDescription());
      assertEquals(5, appt0.getStartHour());
      assertTrue(appt0.isRecurring());
      assertEquals(5, appt0.getStartYear());
      assertEquals(5, appt0.getRecurNumber());
      assertEquals(1, appt0.getRecurBy());
      assertEquals(5, appt0.getStartDay());
      assertEquals(5, appt0.getStartMonth());
      assertTrue(appt0.getValid());
      assertEquals(1789, appt0.getRecurIncrement());
      assertEquals("", appt0.getTitle());
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      
      // Undeclared exception!
      try { 
        timeTable0.getApptRange(linkedList0, mockGregorianCalendar0, mockGregorianCalendar1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.TimeTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int[] intArray0 = new int[6];
      Appt appt0 = new Appt(2, 2, 2, 2, 2, "", "Kl");
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertNotNull(appt0);
      assertEquals(2, appt0.getStartMonth());
      assertEquals(2, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("Kl", appt0.getDescription());
      assertTrue(appt0.getValid());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getTitle());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(2, appt0.getStartHour());
      assertFalse(appt0.isRecurring());
      assertEquals(2, appt0.getStartYear());
      assertEquals(2, appt0.getStartDay());
      
      linkedList0.push(appt0);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1, linkedList0.size());
      assertEquals(2, appt0.getStartMonth());
      assertEquals(2, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("Kl", appt0.getDescription());
      assertTrue(appt0.getValid());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getTitle());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(2, appt0.getStartHour());
      assertFalse(appt0.isRecurring());
      assertEquals(2, appt0.getStartYear());
      assertEquals(2, appt0.getStartDay());
      
      appt0.setRecurrence(intArray0, 2, 2, 3729);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(2, appt0.getStartMonth());
      assertEquals(2, appt0.getStartMinute());
      assertEquals("Kl", appt0.getDescription());
      assertTrue(appt0.getValid());
      assertEquals(3729, appt0.getRecurNumber());
      assertEquals("", appt0.getTitle());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(2, appt0.getRecurIncrement());
      assertEquals(2, appt0.getStartHour());
      assertEquals(2, appt0.getStartYear());
      assertTrue(appt0.isRecurring());
      assertEquals(2, appt0.getStartDay());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3729, 0, 1, 1, 0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=3729,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      
      // Undeclared exception!
      try { 
        timeTable0.getApptRange(linkedList0, mockGregorianCalendar0, mockGregorianCalendar1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int[] intArray0 = new int[6];
      Appt appt0 = new Appt(5, 5, 5, 5, 5, "", "");
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertNotNull(appt0);
      assertEquals(5, appt0.getStartMonth());
      assertEquals(5, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(5, appt0.getStartYear());
      assertEquals("", appt0.getTitle());
      assertEquals(5, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("", appt0.getDescription());
      assertTrue(appt0.getValid());
      assertFalse(appt0.isRecurring());
      assertEquals(5, appt0.getStartDay());
      
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      boolean boolean0 = linkedList0.add(appt0);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(5, appt0.getStartMonth());
      assertEquals(5, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(5, appt0.getStartYear());
      assertEquals("", appt0.getTitle());
      assertEquals(5, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("", appt0.getDescription());
      assertTrue(appt0.getValid());
      assertFalse(appt0.isRecurring());
      assertEquals(5, appt0.getStartDay());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3729, 1, 0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=3729,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      appt0.setRecurrence(intArray0, 3, 1663, 5);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(3, appt0.getRecurBy());
      assertEquals(5, appt0.getStartMonth());
      assertEquals(5, appt0.getStartHour());
      assertEquals(5, appt0.getStartYear());
      assertEquals("", appt0.getTitle());
      assertTrue(appt0.isRecurring());
      assertEquals(5, appt0.getRecurNumber());
      assertEquals(1663, appt0.getRecurIncrement());
      assertEquals(5, appt0.getStartMinute());
      assertEquals("", appt0.getDescription());
      assertTrue(appt0.getValid());
      assertEquals(5, appt0.getStartDay());
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      
      LinkedList<CalDay> linkedList1 = timeTable0.getApptRange(linkedList0, mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(linkedList1);
      assertEquals(1, linkedList0.size());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=3729,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Appt appt0 = new Appt(0, 0, 0, 0, 0, ",F\f]7?m", "K<");
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertNotNull(appt0);
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.getValid());
      assertEquals("K<", appt0.getDescription());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(",F\f]7?m", appt0.getTitle());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      
      linkedList0.push(appt0);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1, linkedList0.size());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.getValid());
      assertEquals("K<", appt0.getDescription());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(",F\f]7?m", appt0.getTitle());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3730, 0, 1, 5, 0);
      assertNotNull(mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=3730,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      
      LinkedList<CalDay> linkedList1 = timeTable0.getApptRange(linkedList0, mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(linkedList1);
      assertEquals(1, linkedList0.size());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=3730,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals(1, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      Appt appt0 = new Appt(5, 5, 5, 5, 5, "", "");
      TimeTable timeTable0 = new TimeTable();
      linkedList0.add(appt0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3754, 1, 0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        timeTable0.getApptRange(linkedList0, mockGregorianCalendar0, mockGregorianCalendar1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.TimeTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1821, 24, 2101, (-875), (-875), 1821);
      try { 
        timeTable0.getApptRange(linkedList0, mockGregorianCalendar0, mockGregorianCalendar0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Second date specified is not  before the first date specified.
         //
         verifyException("calendar.TimeTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
      Clock clock0 = MockClock.systemDefaultZone();
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now(clock0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      // Undeclared exception!
      timeTable0.getApptRange((LinkedList<Appt>) null, mockGregorianCalendar0, gregorianCalendar0);
  }
}
