/*
 * This file was automatically generated by EvoSuite
 * Mon Aug 07 21:43:10 GMT 2017
 */

package calendar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import calendar.Appt;
import calendar.CalendarUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Appt_ESTest extends Appt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "", "");
      assertNotNull(appt0);
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMinute());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getTitle());
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      
      int[] intArray0 = new int[9];
      appt0.setRecurrence(intArray0, 0, 3, (-2282));
      assertFalse(appt0.getValid());
      assertEquals(3, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurBy());
      assertTrue(appt0.isRecurring());
      assertEquals((-2282), appt0.getRecurNumber());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getStartYear());
      assertEquals("", appt0.getTitle());
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      boolean boolean0 = appt0.isRecurring();
      assertTrue(boolean0);
      assertFalse(appt0.getValid());
      assertEquals(3, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurBy());
      assertTrue(appt0.isRecurring());
      assertEquals((-2282), appt0.getRecurNumber());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getStartYear());
      assertEquals("", appt0.getTitle());
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Appt appt0 = new Appt(0, 60, 60, 0, 60, (String) null, (String) null);
      assertNotNull(appt0);
      assertEquals("", appt0.getDescription());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(60, appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertFalse(appt0.getValid());
      assertEquals(60, appt0.getStartMinute());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(60, appt0.getStartDay());
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Appt appt0 = new Appt(24, 24, 0, 0, (-495), "", "");
      assertNotNull(appt0);
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(24, appt0.getStartMinute());
      assertEquals(24, appt0.getStartHour());
      assertFalse(appt0.getValid());
      assertEquals((-495), appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getTitle());
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Appt appt0 = new Appt(60, 60, 12, 0, 0, "9Bg& jnL 9e8@l=k9h{", "9Bg& jnL 9e8@l=k9h{");
      assertNotNull(appt0);
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("9Bg& jnL 9e8@l=k9h{", appt0.getDescription());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(60, appt0.getStartHour());
      assertEquals(60, appt0.getStartMinute());
      assertEquals("9Bg& jnL 9e8@l=k9h{", appt0.getTitle());
      assertEquals(12, appt0.getStartDay());
      assertFalse(appt0.isRecurring());
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      
      boolean boolean0 = appt0.getValid();
      assertFalse(boolean0);
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("9Bg& jnL 9e8@l=k9h{", appt0.getDescription());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(60, appt0.getStartHour());
      assertEquals(60, appt0.getStartMinute());
      assertEquals("9Bg& jnL 9e8@l=k9h{", appt0.getTitle());
      assertEquals(12, appt0.getStartDay());
      assertFalse(appt0.isRecurring());
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Appt appt0 = new Appt(2, 8, 2, 2, 2, "", "CbDNJWQ%x1E\"T#%q");
      assertNotNull(appt0);
      assertEquals("CbDNJWQ%x1E\"T#%q", appt0.getDescription());
      assertFalse(appt0.isRecurring());
      assertTrue(appt0.getValid());
      assertEquals("", appt0.getTitle());
      assertEquals(2, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getStartYear());
      assertEquals(2, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, appt0.getStartDay());
      assertEquals(8, appt0.getStartMinute());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      
      String string0 = appt0.getTitle();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("CbDNJWQ%x1E\"T#%q", appt0.getDescription());
      assertFalse(appt0.isRecurring());
      assertTrue(appt0.getValid());
      assertEquals("", appt0.getTitle());
      assertEquals(2, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getStartYear());
      assertEquals(2, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, appt0.getStartDay());
      assertEquals(8, appt0.getStartMinute());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "", "3=");
      assertNotNull(appt0);
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartHour());
      assertFalse(appt0.isRecurring());
      assertEquals("3=", appt0.getDescription());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartDay());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      
      int int0 = appt0.getStartYear();
      assertEquals(0, int0);
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartHour());
      assertFalse(appt0.isRecurring());
      assertEquals("3=", appt0.getDescription());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartDay());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Appt appt0 = new Appt((-973), (-973), 5, 5, (-3298), "", "");
      assertNotNull(appt0);
      assertEquals(5, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals((-973), appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("", appt0.getTitle());
      assertEquals((-3298), appt0.getStartYear());
      assertEquals((-973), appt0.getStartMinute());
      assertEquals("", appt0.getDescription());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.isRecurring());
      assertEquals(5, appt0.getStartDay());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      
      int int0 = appt0.getStartYear();
      assertEquals((-3298), int0);
      assertEquals(5, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals((-973), appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("", appt0.getTitle());
      assertEquals((-3298), appt0.getStartYear());
      assertEquals((-973), appt0.getStartMinute());
      assertEquals("", appt0.getDescription());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.isRecurring());
      assertEquals(5, appt0.getStartDay());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 28, 11, (-3694), "c!I!W", "c!I!W");
      assertNotNull(appt0);
      assertEquals(11, appt0.getStartMinute());
      assertEquals("c!I!W", appt0.getDescription());
      assertEquals((-3694), appt0.getStartYear());
      assertEquals(0, appt0.getRecurNumber());
      assertTrue(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(28, appt0.getStartDay());
      assertEquals("c!I!W", appt0.getTitle());
      assertEquals(11, appt0.getStartMonth());
      assertEquals(11, appt0.getStartHour());
      assertFalse(appt0.isRecurring());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      
      int int0 = appt0.getStartMonth();
      assertEquals(11, int0);
      assertEquals(11, appt0.getStartMinute());
      assertEquals("c!I!W", appt0.getDescription());
      assertEquals((-3694), appt0.getStartYear());
      assertEquals(0, appt0.getRecurNumber());
      assertTrue(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(28, appt0.getStartDay());
      assertEquals("c!I!W", appt0.getTitle());
      assertEquals(11, appt0.getStartMonth());
      assertEquals(11, appt0.getStartHour());
      assertFalse(appt0.isRecurring());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 1000, "8", "8");
      assertNotNull(appt0);
      assertEquals(0, appt0.getStartMonth());
      assertEquals("8", appt0.getTitle());
      assertEquals(0, appt0.getStartDay());
      assertEquals(1000, appt0.getStartYear());
      assertEquals("8", appt0.getDescription());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMinute());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      
      int int0 = appt0.getStartMinute();
      assertEquals(0, int0);
      assertEquals(0, appt0.getStartMonth());
      assertEquals("8", appt0.getTitle());
      assertEquals(0, appt0.getStartDay());
      assertEquals(1000, appt0.getStartYear());
      assertEquals("8", appt0.getDescription());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMinute());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 28, 11, (-3694), "c!I!W", "c!I!W");
      assertNotNull(appt0);
      assertEquals(28, appt0.getStartDay());
      assertEquals(11, appt0.getStartMonth());
      assertEquals((-3694), appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertTrue(appt0.getValid());
      assertEquals(11, appt0.getStartMinute());
      assertEquals("c!I!W", appt0.getDescription());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("c!I!W", appt0.getTitle());
      assertEquals(11, appt0.getStartHour());
      assertFalse(appt0.isRecurring());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      
      int int0 = appt0.getStartMinute();
      assertEquals(11, int0);
      assertEquals(28, appt0.getStartDay());
      assertEquals(11, appt0.getStartMonth());
      assertEquals((-3694), appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertTrue(appt0.getValid());
      assertEquals(11, appt0.getStartMinute());
      assertEquals("c!I!W", appt0.getDescription());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("c!I!W", appt0.getTitle());
      assertEquals(11, appt0.getStartHour());
      assertFalse(appt0.isRecurring());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 1000, "8", "8");
      assertNotNull(appt0);
      assertEquals("8", appt0.getDescription());
      assertEquals(0, appt0.getStartDay());
      assertFalse(appt0.getValid());
      assertEquals("8", appt0.getTitle());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(1000, appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      
      int int0 = appt0.getStartHour();
      assertEquals(0, int0);
      assertEquals("8", appt0.getDescription());
      assertEquals(0, appt0.getStartDay());
      assertFalse(appt0.getValid());
      assertEquals("8", appt0.getTitle());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(1000, appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Appt appt0 = new Appt(2048, 2048, 2048, 0, (-4133), (String) null, (String) null);
      assertNotNull(appt0);
      assertFalse(appt0.isRecurring());
      assertEquals(2048, appt0.getStartMinute());
      assertFalse(appt0.getValid());
      assertEquals("", appt0.getTitle());
      assertEquals(2048, appt0.getStartDay());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("", appt0.getDescription());
      assertEquals(2048, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals((-4133), appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      
      int int0 = appt0.getStartHour();
      assertEquals(2048, int0);
      assertFalse(appt0.isRecurring());
      assertEquals(2048, appt0.getStartMinute());
      assertFalse(appt0.getValid());
      assertEquals("", appt0.getTitle());
      assertEquals(2048, appt0.getStartDay());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("", appt0.getDescription());
      assertEquals(2048, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals((-4133), appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, (String) null, ", ");
      assertNotNull(appt0);
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(", ", appt0.getDescription());
      assertFalse(appt0.isRecurring());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartMonth());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartHour());
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      
      int int0 = appt0.getStartDay();
      assertEquals(0, int0);
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(", ", appt0.getDescription());
      assertFalse(appt0.isRecurring());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartMonth());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartHour());
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Appt appt0 = new Appt(2320, 6, 2320, 0, 3617, "\"", "\"");
      assertNotNull(appt0);
      assertEquals(3617, appt0.getStartYear());
      assertEquals("\"", appt0.getTitle());
      assertFalse(appt0.getValid());
      assertEquals(6, appt0.getStartMinute());
      assertEquals(2320, appt0.getStartDay());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("\"", appt0.getDescription());
      assertEquals(2320, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      
      int int0 = appt0.getStartDay();
      assertEquals(2320, int0);
      assertEquals(3617, appt0.getStartYear());
      assertEquals("\"", appt0.getTitle());
      assertFalse(appt0.getValid());
      assertEquals(6, appt0.getStartMinute());
      assertEquals(2320, appt0.getStartDay());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("\"", appt0.getDescription());
      assertEquals(2320, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Appt appt0 = new Appt(2048, 2048, 2048, 0, (-4133), (String) null, (String) null);
      assertNotNull(appt0);
      assertFalse(appt0.isRecurring());
      assertEquals(2048, appt0.getStartMinute());
      assertFalse(appt0.getValid());
      assertEquals(2048, appt0.getStartHour());
      assertEquals((-4133), appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartMonth());
      assertEquals("", appt0.getDescription());
      assertEquals(2048, appt0.getStartDay());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      
      int[] intArray0 = new int[1];
      appt0.setRecurrence(intArray0, 12, 5, 13);
      assertEquals(2048, appt0.getStartMinute());
      assertFalse(appt0.getValid());
      assertEquals(2048, appt0.getStartHour());
      assertEquals((-4133), appt0.getStartYear());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(12, appt0.getRecurBy());
      assertEquals("", appt0.getDescription());
      assertEquals(2048, appt0.getStartDay());
      assertEquals(13, appt0.getRecurNumber());
      assertTrue(appt0.isRecurring());
      assertEquals(5, appt0.getRecurIncrement());
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertArrayEquals(new int[] {0}, intArray0);
      
      int int0 = appt0.getRecurNumber();
      assertEquals(13, int0);
      assertEquals(2048, appt0.getStartMinute());
      assertFalse(appt0.getValid());
      assertEquals(2048, appt0.getStartHour());
      assertEquals((-4133), appt0.getStartYear());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(12, appt0.getRecurBy());
      assertEquals("", appt0.getDescription());
      assertEquals(2048, appt0.getStartDay());
      assertEquals(13, appt0.getRecurNumber());
      assertTrue(appt0.isRecurring());
      assertEquals(5, appt0.getRecurIncrement());
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Appt appt0 = new Appt(17, 0, 17, 0, (-1801), "(wyr", "(wyr");
      assertNotNull(appt0);
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals((-1801), appt0.getStartYear());
      assertEquals("(wyr", appt0.getDescription());
      assertFalse(appt0.isRecurring());
      assertEquals("(wyr", appt0.getTitle());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(17, appt0.getStartDay());
      assertEquals(17, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      
      int[] intArray0 = new int[0];
      appt0.setRecurrence(intArray0, 2, 3, (-1801));
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-1801), appt0.getStartYear());
      assertEquals("(wyr", appt0.getDescription());
      assertEquals("(wyr", appt0.getTitle());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(17, appt0.getStartDay());
      assertTrue(appt0.isRecurring());
      assertEquals((-1801), appt0.getRecurNumber());
      assertEquals(17, appt0.getStartHour());
      assertEquals(3, appt0.getRecurIncrement());
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertArrayEquals(new int[] {}, intArray0);
      
      int int0 = appt0.getRecurNumber();
      assertEquals((-1801), int0);
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-1801), appt0.getStartYear());
      assertEquals("(wyr", appt0.getDescription());
      assertEquals("(wyr", appt0.getTitle());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(17, appt0.getStartDay());
      assertTrue(appt0.isRecurring());
      assertEquals((-1801), appt0.getRecurNumber());
      assertEquals(17, appt0.getStartHour());
      assertEquals(3, appt0.getRecurIncrement());
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "", "");
      assertNotNull(appt0);
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getStartYear());
      assertEquals("", appt0.getDescription());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      
      int[] intArray0 = new int[2];
      appt0.setRecurrence(intArray0, 0, 1284, 3);
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurBy());
      assertEquals(1284, appt0.getRecurIncrement());
      assertTrue(appt0.isRecurring());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartMonth());
      assertEquals("", appt0.getTitle());
      assertEquals(3, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getStartYear());
      assertEquals("", appt0.getDescription());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      int int0 = appt0.getRecurIncrement();
      assertEquals(1284, int0);
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurBy());
      assertEquals(1284, appt0.getRecurIncrement());
      assertTrue(appt0.isRecurring());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartMonth());
      assertEquals("", appt0.getTitle());
      assertEquals(3, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getStartYear());
      assertEquals("", appt0.getDescription());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Appt appt0 = new Appt((-326), (-326), 2711, 3, (-326), "UGT1:o", "UGT1:o");
      assertNotNull(appt0);
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals((-326), appt0.getStartMinute());
      assertEquals(3, appt0.getStartMonth());
      assertEquals("UGT1:o", appt0.getDescription());
      assertEquals((-326), appt0.getStartHour());
      assertEquals((-326), appt0.getStartYear());
      assertEquals(2711, appt0.getStartDay());
      assertFalse(appt0.isRecurring());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("UGT1:o", appt0.getTitle());
      assertEquals(0, appt0.getRecurNumber());
      assertFalse(appt0.getValid());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      
      int[] intArray0 = new int[6];
      appt0.setRecurrence(intArray0, 1000, (-975), 1);
      assertEquals((-326), appt0.getStartMinute());
      assertEquals((-975), appt0.getRecurIncrement());
      assertEquals(3, appt0.getStartMonth());
      assertEquals("UGT1:o", appt0.getDescription());
      assertTrue(appt0.isRecurring());
      assertEquals((-326), appt0.getStartHour());
      assertEquals((-326), appt0.getStartYear());
      assertEquals(2711, appt0.getStartDay());
      assertEquals(1, appt0.getRecurNumber());
      assertEquals("UGT1:o", appt0.getTitle());
      assertFalse(appt0.getValid());
      assertEquals(1000, appt0.getRecurBy());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      int int0 = appt0.getRecurIncrement();
      assertEquals((-975), int0);
      assertEquals((-326), appt0.getStartMinute());
      assertEquals((-975), appt0.getRecurIncrement());
      assertEquals(3, appt0.getStartMonth());
      assertEquals("UGT1:o", appt0.getDescription());
      assertTrue(appt0.isRecurring());
      assertEquals((-326), appt0.getStartHour());
      assertEquals((-326), appt0.getStartYear());
      assertEquals(2711, appt0.getStartDay());
      assertEquals(1, appt0.getRecurNumber());
      assertEquals("UGT1:o", appt0.getTitle());
      assertFalse(appt0.getValid());
      assertEquals(1000, appt0.getRecurBy());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "", "");
      assertNotNull(appt0);
      assertEquals("", appt0.getDescription());
      assertFalse(appt0.isRecurring());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartHour());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      
      int[] intArray0 = new int[2];
      appt0.setRecurrence(intArray0, 0, 0, 0);
      assertEquals("", appt0.getDescription());
      assertFalse(appt0.isRecurring());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getRecurBy());
      assertEquals(0, appt0.getStartHour());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      int[] intArray1 = appt0.getRecurDays();
      assertNotNull(intArray1);
      assertSame(intArray1, intArray0);
      assertEquals("", appt0.getDescription());
      assertFalse(appt0.isRecurring());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getRecurBy());
      assertEquals(0, appt0.getStartHour());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertArrayEquals(new int[] {0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "", "");
      assertNotNull(appt0);
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartDay());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      
      int[] intArray0 = new int[2];
      appt0.setRecurrence(intArray0, 0, 0, 0);
      assertEquals(0, appt0.getRecurBy());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartDay());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      int int0 = appt0.getRecurBy();
      assertEquals(0, int0);
      assertEquals(0, appt0.getRecurBy());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartDay());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "", "3=");
      assertNotNull(appt0);
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartDay());
      assertEquals("3=", appt0.getDescription());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      
      int[] intArray0 = new int[2];
      appt0.setRecurrence(intArray0, (-587), 3496, 0);
      assertEquals((-587), appt0.getRecurBy());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartHour());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartDay());
      assertEquals(3496, appt0.getRecurIncrement());
      assertEquals("3=", appt0.getDescription());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      int int0 = appt0.getRecurBy();
      assertEquals((-587), int0);
      assertEquals((-587), appt0.getRecurBy());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartHour());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartDay());
      assertEquals(3496, appt0.getRecurIncrement());
      assertEquals("3=", appt0.getDescription());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Appt appt0 = new Appt(2048, 2048, 2048, 0, (-4133), (String) null, (String) null);
      assertNotNull(appt0);
      assertFalse(appt0.isRecurring());
      assertEquals(2048, appt0.getStartMinute());
      assertEquals("", appt0.getTitle());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartMonth());
      assertEquals((-4133), appt0.getStartYear());
      assertEquals(2048, appt0.getStartDay());
      assertEquals(2048, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("", appt0.getDescription());
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      
      String string0 = appt0.getDescription();
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(appt0.isRecurring());
      assertEquals(2048, appt0.getStartMinute());
      assertEquals("", appt0.getTitle());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartMonth());
      assertEquals((-4133), appt0.getStartYear());
      assertEquals(2048, appt0.getStartDay());
      assertEquals(2048, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("", appt0.getDescription());
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, (-3651), 0, 0, (String) null, (String) null);
      assertNotNull(appt0);
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals((-3651), appt0.getStartDay());
      assertEquals("", appt0.getTitle());
      assertEquals("", appt0.getDescription());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartYear((-1401));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Appt appt0 = new Appt(1337, 0, 2006, 0, (-9), "", "");
      assertNotNull(appt0);
      assertEquals("", appt0.getTitle());
      assertFalse(appt0.isRecurring());
      assertEquals(1337, appt0.getStartHour());
      assertEquals((-9), appt0.getStartYear());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartMonth());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2006, appt0.getStartDay());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      
      int[] intArray0 = new int[0];
      CalendarUtil.DaysInMonth = intArray0;
      // Undeclared exception!
      try { 
        appt0.setStartYear(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Appt appt0 = new Appt((-3865), 0, 0, 0, 753, "(;EhMGf'sR'T>q_,", "(;EhMGf'sR'T>q_,");
      assertNotNull(appt0);
      assertEquals(0, appt0.getStartMinute());
      assertEquals((-3865), appt0.getStartHour());
      assertEquals(753, appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.isRecurring());
      assertEquals("(;EhMGf'sR'T>q_,", appt0.getDescription());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartDay());
      assertEquals("(;EhMGf'sR'T>q_,", appt0.getTitle());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartMonth(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "", "");
      assertNotNull(appt0);
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartDay());
      assertEquals("", appt0.getDescription());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      
      // Undeclared exception!
      try { 
        appt0.setStartMonth((-2282));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2282
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Appt appt0 = new Appt((-2424), 10, (-866), 11, 400, "", "");
      assertNotNull(appt0);
      assertEquals((-866), appt0.getStartDay());
      assertEquals(11, appt0.getStartMonth());
      assertEquals("", appt0.getTitle());
      assertFalse(appt0.isRecurring());
      assertEquals((-2424), appt0.getStartHour());
      assertEquals(400, appt0.getStartYear());
      assertEquals(10, appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartMinute(400);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 28, 11, (-3694), "c!I!W", "c!I!W");
      assertNotNull(appt0);
      assertEquals(11, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(28, appt0.getStartDay());
      assertEquals(11, appt0.getStartMonth());
      assertEquals(11, appt0.getStartMinute());
      assertEquals((-3694), appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertFalse(appt0.isRecurring());
      assertEquals("c!I!W", appt0.getDescription());
      assertTrue(appt0.getValid());
      assertEquals("c!I!W", appt0.getTitle());
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      
      int[] intArray0 = new int[0];
      CalendarUtil.DaysInMonth = intArray0;
      // Undeclared exception!
      try { 
        appt0.setStartMinute(332);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, (String) null, ", ");
      assertNotNull(appt0);
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartDay());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getTitle());
      assertEquals(", ", appt0.getDescription());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      
      int[] intArray0 = new int[0];
      CalendarUtil.DaysInMonth = intArray0;
      // Undeclared exception!
      try { 
        appt0.setStartHour(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Appt appt0 = new Appt(2, 2, 2, 0, (-2186), (String) null, (String) null);
      assertNotNull(appt0);
      assertEquals(2, appt0.getStartDay());
      assertEquals("", appt0.getDescription());
      assertEquals((-2186), appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(2, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartDay(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Appt appt0 = new Appt((-3418), 0, (-1434), 11, (-3418), "<9/WD`vUF", "");
      assertNotNull(appt0);
      assertEquals((-1434), appt0.getStartDay());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      assertEquals("<9/WD`vUF", appt0.getTitle());
      assertEquals(11, appt0.getStartMonth());
      assertEquals((-3418), appt0.getStartHour());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMinute());
      assertEquals((-3418), appt0.getStartYear());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      
      int[] intArray0 = new int[7];
      CalendarUtil.DaysInMonth = intArray0;
      // Undeclared exception!
      try { 
        appt0.setStartDay(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Appt appt0 = null;
      try {
        appt0 = new Appt(511, 511, 511, 511, 511, "", "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 511
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Appt appt0 = new Appt((-2424), 10, (-866), 11, 400, "", "");
      assertNotNull(appt0);
      assertEquals("", appt0.getDescription());
      assertEquals(10, appt0.getStartMinute());
      assertEquals(11, appt0.getStartMonth());
      assertEquals((-866), appt0.getStartDay());
      assertEquals(400, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getTitle());
      assertEquals((-2424), appt0.getStartHour());
      assertFalse(appt0.isRecurring());
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      
      appt0.setDescription("");
      assertEquals("", appt0.getDescription());
      assertEquals(10, appt0.getStartMinute());
      assertEquals(11, appt0.getStartMonth());
      assertEquals((-866), appt0.getStartDay());
      assertEquals(400, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getTitle());
      assertEquals((-2424), appt0.getStartHour());
      assertFalse(appt0.isRecurring());
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "$~", "$~");
      assertNotNull(appt0);
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.isRecurring());
      assertFalse(appt0.getValid());
      assertEquals("$~", appt0.getDescription());
      assertEquals("$~", appt0.getTitle());
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      
      appt0.setDescription((String) null);
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.isRecurring());
      assertFalse(appt0.getValid());
      assertEquals("$~", appt0.getTitle());
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, (-3651), 0, 0, (String) null, (String) null);
      assertNotNull(appt0);
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals((-3651), appt0.getStartDay());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getStartYear());
      assertEquals("", appt0.getDescription());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      
      appt0.setTitle((String) null);
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals((-3651), appt0.getStartDay());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getStartYear());
      assertEquals("", appt0.getDescription());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Appt appt0 = new Appt((-2316), (-2316), (-2316), 0, 1159, "", "");
      assertNotNull(appt0);
      assertEquals((-2316), appt0.getStartMinute());
      assertEquals("", appt0.getTitle());
      assertFalse(appt0.isRecurring());
      assertEquals((-2316), appt0.getStartHour());
      assertEquals(1159, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals((-2316), appt0.getStartDay());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getDescription());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      
      appt0.setTitle("");
      assertEquals((-2316), appt0.getStartMinute());
      assertEquals("", appt0.getTitle());
      assertFalse(appt0.isRecurring());
      assertEquals((-2316), appt0.getStartHour());
      assertEquals(1159, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals((-2316), appt0.getStartDay());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getDescription());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Appt appt0 = new Appt((-2316), (-2316), (-2316), 0, 1159, "", "");
      assertNotNull(appt0);
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertFalse(appt0.getValid());
      assertEquals((-2316), appt0.getStartHour());
      assertEquals("", appt0.getTitle());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals((-2316), appt0.getStartMinute());
      assertEquals(1159, appt0.getStartYear());
      assertEquals((-2316), appt0.getStartDay());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      
      int int0 = appt0.getRecurNumber();
      assertEquals(0, int0);
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertFalse(appt0.getValid());
      assertEquals((-2316), appt0.getStartHour());
      assertEquals("", appt0.getTitle());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals((-2316), appt0.getStartMinute());
      assertEquals(1159, appt0.getStartYear());
      assertEquals((-2316), appt0.getStartDay());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Appt appt0 = new Appt((-973), (-973), 5, 5, (-3298), "", "");
      assertNotNull(appt0);
      assertEquals((-3298), appt0.getStartYear());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals((-973), appt0.getStartHour());
      assertEquals(5, appt0.getStartMonth());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.isRecurring());
      assertEquals((-973), appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("", appt0.getTitle());
      assertEquals(5, appt0.getStartDay());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      
      int int0 = appt0.getStartMinute();
      assertEquals((-973), int0);
      assertEquals((-3298), appt0.getStartYear());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals((-973), appt0.getStartHour());
      assertEquals(5, appt0.getStartMonth());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.isRecurring());
      assertEquals((-973), appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("", appt0.getTitle());
      assertEquals(5, appt0.getStartDay());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Appt appt0 = new Appt((-973), (-973), 5, 5, (-3298), "", "");
      assertNotNull(appt0);
      assertEquals((-3298), appt0.getStartYear());
      assertEquals(5, appt0.getStartDay());
      assertFalse(appt0.isRecurring());
      assertEquals("", appt0.getTitle());
      assertEquals((-973), appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals((-973), appt0.getStartHour());
      assertEquals(5, appt0.getStartMonth());
      assertEquals("", appt0.getDescription());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      
      int int0 = appt0.getStartHour();
      assertEquals((-973), int0);
      assertEquals((-3298), appt0.getStartYear());
      assertEquals(5, appt0.getStartDay());
      assertFalse(appt0.isRecurring());
      assertEquals("", appt0.getTitle());
      assertEquals((-973), appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals((-973), appt0.getStartHour());
      assertEquals(5, appt0.getStartMonth());
      assertEquals("", appt0.getDescription());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Appt appt0 = new Appt(0, (-3230), (-3230), 0, (-168), "", "");
      assertNotNull(appt0);
      assertEquals((-168), appt0.getStartYear());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals((-3230), appt0.getStartDay());
      assertEquals(0, appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals((-3230), appt0.getStartMinute());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      
      int int0 = appt0.getStartMonth();
      assertEquals(0, int0);
      assertEquals((-168), appt0.getStartYear());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals((-3230), appt0.getStartDay());
      assertEquals(0, appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals((-3230), appt0.getStartMinute());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Appt appt0 = new Appt(7, 7, 7, 7, 7, "calendar.CalendarUtil", "");
      int int0 = appt0.getStartYear();
      assertEquals(2, appt0.getRecurBy());
      assertEquals(7, appt0.getStartMonth());
      assertTrue(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("calendar.CalendarUtil", appt0.getTitle());
      assertEquals(7, appt0.getStartMinute());
      assertEquals(7, int0);
      assertEquals(7, appt0.getStartHour());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Appt appt0 = new Appt(7, 7, 7, 7, 7, "calendar.CalendarUtil", "");
      boolean boolean0 = appt0.getValid();
      assertEquals(7, appt0.getStartYear());
      assertEquals(7, appt0.getStartMinute());
      assertTrue(boolean0);
      assertEquals(7, appt0.getStartHour());
      assertEquals(7, appt0.getStartDay());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(7, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals("calendar.CalendarUtil", appt0.getTitle());
      assertEquals(2, appt0.getRecurBy());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Appt appt0 = new Appt(7, 7, 7, 7, 7, "calendar.CalendarUtil", "");
      appt0.getTitle();
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(7, appt0.getStartDay());
      assertTrue(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(7, appt0.getStartHour());
      assertEquals(7, appt0.getStartYear());
      assertEquals(7, appt0.getStartMonth());
      assertEquals(7, appt0.getStartMinute());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 31, 0, 0, ";4!%TC\"5", ";4!%TC\"5");
      appt0.getDescription();
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getStartHour());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(31, appt0.getStartDay());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Appt appt0 = new Appt((-2316), (-2316), (-2316), 0, 1159, "", "");
      int int0 = appt0.getStartDay();
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals((-2316), appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-2316), appt0.getStartHour());
      assertEquals((-2316), int0);
      assertEquals(1159, appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Appt appt0 = new Appt((-3418), 0, (-1434), 11, (-3418), "<9/WD`vUF", "");
      String string0 = appt0.toString();
      assertEquals((-3418), appt0.getStartYear());
      assertEquals((-3418), appt0.getStartHour());
      assertEquals(11, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertNull(string0);
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals((-1434), appt0.getStartDay());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("<9/WD`vUF", appt0.getTitle());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Appt appt0 = new Appt(33, 33, 6, 6, 6, "", "");
      appt0.setStartHour(23);
      appt0.toString();
      assertEquals(23, appt0.getStartHour());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 28, 11, (-3694), "c!I!W", "c!I!W");
      String string0 = appt0.toString();
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.isRecurring());
      assertEquals("\t11/28/-3694 at 11:11am ,c!I!W, c!I!W\n", string0);
      assertNotNull(string0);
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Appt appt0 = new Appt(12, 0, 12, 0, 12, "hS^a}sN:>A", "hS^a}sN:>A");
      int[] intArray0 = new int[9];
      appt0.setRecurrence(intArray0, 2, 3, 12);
      boolean boolean0 = appt0.isRecurring();
      assertEquals(12, appt0.getRecurNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Appt appt0 = new Appt((-2424), 10, (-866), 11, 400, "", "");
      appt0.setRecurrence((int[]) null, 12, (-3891), (-2424));
      assertEquals((-2424), appt0.getRecurNumber());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Appt appt0 = new Appt(8, 8, 8, 0, 1217, "T14lWuNu4S 'z7Z#~P;", "T14lWuNu4S 'z7Z#~P;");
      appt0.setStartDay(2004);
      assertEquals(2004, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, (-3651), 0, 0, (String) null, (String) null);
      assertEquals(0, appt0.getStartMinute());
      
      appt0.setStartMinute((-3651));
      assertEquals(0, appt0.getStartHour());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Appt appt0 = new Appt(1477, 0, 1477, 0, 0, "", "");
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartHour(1477);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 28, 11, (-3694), "c!I!W", "c!I!W");
      appt0.setStartMinute(332);
      assertEquals(332, appt0.getStartMinute());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Appt appt0 = new Appt((-3418), 0, (-1434), 11, (-3418), "<9/WD`vUF", "");
      int[] intArray0 = appt0.getRecurDays();
      assertEquals("", appt0.getDescription());
      assertEquals("<9/WD`vUF", appt0.getTitle());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals((-3418), appt0.getStartYear());
      assertEquals(11, appt0.getStartMonth());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartMinute());
      assertEquals((-3418), appt0.getStartHour());
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1434), appt0.getStartDay());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "", "");
      appt0.setStartMonth(3);
      assertEquals(3, appt0.getStartMonth());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 28, 11, (-3694), "c!I!W", "c!I!W");
      int int0 = appt0.getRecurBy();
      assertEquals(2, int0);
      assertEquals(11, appt0.getStartMonth());
      assertEquals(28, appt0.getStartDay());
      assertEquals((-3694), appt0.getStartYear());
      assertEquals(11, appt0.getStartMinute());
      assertEquals("c!I!W", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(11, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("c!I!W", appt0.getTitle());
      assertTrue(appt0.getValid());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 28, 11, (-3694), "c!I!W", "c!I!W");
      appt0.setStartYear((-3694));
      assertTrue(appt0.getValid());
      assertEquals(11, appt0.getStartMinute());
      assertEquals("c!I!W", appt0.getTitle());
      assertEquals(11, appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(11, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(28, appt0.getStartDay());
      assertEquals((-3694), appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 28, 11, (-3694), "c!I!W", "c!I!W");
      assertEquals(11, appt0.getStartHour());
      
      appt0.setStartHour(0);
      String string0 = appt0.toString();
      assertEquals("\t11/28/-3694 at 12:11am ,c!I!W, c!I!W\n", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "", "");
      int int0 = appt0.getRecurIncrement();
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, int0);
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Appt appt0 = new Appt(12, 12, 6, 6, 2596, "", (String) null);
      String string0 = appt0.toString();
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("\t6/6/2596 at 12:12pm ,, \n", string0);
      assertEquals(2, appt0.getRecurBy());
      assertNotNull(string0);
      assertFalse(appt0.isRecurring());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Appt appt0 = new Appt(12, 0, 12, 0, 12, "hS^a}sN:>A", "hS^a}sN:>A");
      boolean boolean0 = appt0.isRecurring();
      assertEquals(12, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartMinute());
      assertFalse(boolean0);
      assertFalse(appt0.getValid());
      assertEquals(12, appt0.getStartDay());
      assertEquals("hS^a}sN:>A", appt0.getDescription());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(12, appt0.getStartYear());
  }
}
